apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: golang-task-two-docker-build-push
spec:
  params:
    - name: IMAGE_TAG
    - name: IMAGE_REPO
    - name: ARGO_APP
  resources:
    inputs:
      - name: repo
        type: git
#    stepTemplate:
#    envFrom:
#      - configMapRef:
#          name: argocd-env-configmap  # used for server address
#      - secretRef:
#          name: argocd-env-secret  # used for authentication (username/password or auth token)
  steps:
    - name: build-and-push
      image: gcr.io/kaniko-project/executor:v1.3.0
      env:
        - name: DOCKER_CONFIG
          value: /tekton/home/.docker
      command:
        - /kaniko/executor
        - --dockerfile=Dockerfile
        - --context=/workspace/repo
        - --destination=$(params.IMAGE_REPO):$(params.IMAGE_TAG)

#    - name: deploy-argocd
#      image: argoproj/argocd:v1.7.7
#      script: |
#        echo "Start Deploying Argo1!"
#        argocd login 10.43.193.88:443  --insecure --plaintext --username $ARGOCD_USERNAME --password $ARGOCD_PASSWORD
#        argocd app sync $ARGOCD_APPLICATION_NAME  --insecure $(params.flags) --grpc-web-root-path /argo-cd --server $ARGOCD_SERVER
#        echo "Start Deploying Argo2!"
#        argocd app wait $ARGOCD_APPLICATION_NAME --health $(params.flags) --grpc-web-root-path /argo-cd --server $ARGOCD_SERVER


--- 


#apiVersion: tekton.dev/v1beta1
#kind: TaskRun
#metadata:
#  name: taskrun-build-and-push
#spec:
#  serviceAccountName: golang-service-account
#  taskRef:
#    name: golang-task-two-docker-build-push
#  resources:
#    inputs:
#      - name: repo
#        resourceRef:
#          name: golang-pipeline-resource